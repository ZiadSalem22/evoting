{"id":"../../node_modules/encodeurl/index.js","dependencies":[{"name":"C:\\Users\\hp\\Desktop\\Graduation Project\\Code\\evoting\\package.json","includedInParent":true,"mtime":1673510995609},{"name":"C:\\Users\\hp\\Desktop\\Graduation Project\\Code\\evoting\\node_modules\\encodeurl\\package.json","includedInParent":true,"mtime":1672333321711}],"generated":{"js":"/*!\r\n * encodeurl\r\n * Copyright(c) 2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nmodule.exports = encodeUrl;\n\n/**\r\n * RegExp to match non-URL code points, *after* encoding (i.e. not including \"%\")\r\n * and including invalid escape sequences.\r\n * @private\r\n */\n\nvar ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;\n\n/**\r\n * RegExp to match unmatched surrogate pair.\r\n * @private\r\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g;\n\n/**\r\n * String to replace unmatched surrogate pair with.\r\n * @private\r\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2';\n\n/**\r\n * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\r\n *\r\n * This function will take an already-encoded URL and encode all the non-URL\r\n * code points. This function will not encode the \"%\" character unless it is\r\n * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\r\n * be encoded as `%25foo`).\r\n *\r\n * This encode is meant to be \"safe\" and does not throw errors. It will try as\r\n * hard as it can to properly encode the given URL, including replacing any raw,\r\n * unpaired surrogate pairs with the Unicode replacement character prior to\r\n * encoding.\r\n *\r\n * @param {string} url\r\n * @return {string}\r\n * @public\r\n */\n\nfunction encodeUrl(url) {\n  return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":5,"column":0}},{"generated":{"line":7,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":7,"column":0}},{"generated":{"line":7,"column":12},"source":"../../node_modules/encodeurl/index.js","original":{"line":7,"column":12}},{"generated":{"line":9,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":9,"column":0}},{"generated":{"line":10,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":10,"column":0}},{"generated":{"line":11,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":11,"column":0}},{"generated":{"line":12,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":12,"column":0}},{"generated":{"line":13,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":14,"column":0},"name":"module"},{"generated":{"line":13,"column":6},"source":"../../node_modules/encodeurl/index.js","original":{"line":14,"column":6}},{"generated":{"line":13,"column":7},"source":"../../node_modules/encodeurl/index.js","original":{"line":14,"column":7},"name":"exports"},{"generated":{"line":13,"column":14},"source":"../../node_modules/encodeurl/index.js","original":{"line":14,"column":14}},{"generated":{"line":13,"column":17},"source":"../../node_modules/encodeurl/index.js","original":{"line":14,"column":17},"name":"encodeUrl"},{"generated":{"line":13,"column":26},"source":"../../node_modules/encodeurl/index.js","original":{"line":14,"column":26}},{"generated":{"line":15,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":16,"column":0}},{"generated":{"line":16,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":17,"column":0}},{"generated":{"line":17,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":18,"column":0}},{"generated":{"line":18,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":19,"column":0}},{"generated":{"line":19,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":20,"column":0}},{"generated":{"line":21,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":22,"column":0}},{"generated":{"line":21,"column":4},"source":"../../node_modules/encodeurl/index.js","original":{"line":22,"column":4},"name":"ENCODE_CHARS_REGEXP"},{"generated":{"line":21,"column":23},"source":"../../node_modules/encodeurl/index.js","original":{"line":22,"column":23}},{"generated":{"line":21,"column":26},"source":"../../node_modules/encodeurl/index.js","original":{"line":22,"column":26}},{"generated":{"line":21,"column":132},"source":"../../node_modules/encodeurl/index.js","original":{"line":22,"column":132}},{"generated":{"line":23,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":24,"column":0}},{"generated":{"line":24,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":25,"column":0}},{"generated":{"line":25,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":26,"column":0}},{"generated":{"line":26,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":27,"column":0}},{"generated":{"line":28,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":29,"column":0}},{"generated":{"line":28,"column":4},"source":"../../node_modules/encodeurl/index.js","original":{"line":29,"column":4},"name":"UNMATCHED_SURROGATE_PAIR_REGEXP"},{"generated":{"line":28,"column":35},"source":"../../node_modules/encodeurl/index.js","original":{"line":29,"column":35}},{"generated":{"line":28,"column":38},"source":"../../node_modules/encodeurl/index.js","original":{"line":29,"column":38}},{"generated":{"line":28,"column":112},"source":"../../node_modules/encodeurl/index.js","original":{"line":29,"column":112}},{"generated":{"line":30,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":31,"column":0}},{"generated":{"line":31,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":32,"column":0}},{"generated":{"line":32,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":33,"column":0}},{"generated":{"line":33,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":34,"column":0}},{"generated":{"line":35,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":36,"column":0}},{"generated":{"line":35,"column":4},"source":"../../node_modules/encodeurl/index.js","original":{"line":36,"column":4},"name":"UNMATCHED_SURROGATE_PAIR_REPLACE"},{"generated":{"line":35,"column":36},"source":"../../node_modules/encodeurl/index.js","original":{"line":36,"column":36}},{"generated":{"line":35,"column":39},"source":"../../node_modules/encodeurl/index.js","original":{"line":36,"column":39}},{"generated":{"line":35,"column":51},"source":"../../node_modules/encodeurl/index.js","original":{"line":36,"column":51}},{"generated":{"line":37,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":38,"column":0}},{"generated":{"line":38,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":39,"column":0}},{"generated":{"line":39,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":40,"column":0}},{"generated":{"line":40,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":41,"column":0}},{"generated":{"line":41,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":42,"column":0}},{"generated":{"line":42,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":43,"column":0}},{"generated":{"line":43,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":44,"column":0}},{"generated":{"line":44,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":45,"column":0}},{"generated":{"line":45,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":46,"column":0}},{"generated":{"line":46,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":47,"column":0}},{"generated":{"line":47,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":48,"column":0}},{"generated":{"line":48,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":49,"column":0}},{"generated":{"line":49,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":50,"column":0}},{"generated":{"line":50,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":51,"column":0}},{"generated":{"line":51,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":52,"column":0}},{"generated":{"line":52,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":53,"column":0}},{"generated":{"line":53,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":54,"column":0}},{"generated":{"line":55,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":56,"column":0}},{"generated":{"line":55,"column":9},"source":"../../node_modules/encodeurl/index.js","original":{"line":56,"column":9},"name":"encodeUrl"},{"generated":{"line":55,"column":18},"source":"../../node_modules/encodeurl/index.js","original":{"line":56,"column":18}},{"generated":{"line":55,"column":19},"source":"../../node_modules/encodeurl/index.js","original":{"line":56,"column":20},"name":"url"},{"generated":{"line":55,"column":22},"source":"../../node_modules/encodeurl/index.js","original":{"line":56,"column":23}},{"generated":{"line":55,"column":24},"source":"../../node_modules/encodeurl/index.js","original":{"line":56,"column":25}},{"generated":{"line":56,"column":2},"source":"../../node_modules/encodeurl/index.js","original":{"line":57,"column":2}},{"generated":{"line":56,"column":9},"source":"../../node_modules/encodeurl/index.js","original":{"line":57,"column":9},"name":"String"},{"generated":{"line":56,"column":15},"source":"../../node_modules/encodeurl/index.js","original":{"line":57,"column":15}},{"generated":{"line":56,"column":16},"source":"../../node_modules/encodeurl/index.js","original":{"line":57,"column":16},"name":"url"},{"generated":{"line":56,"column":19},"source":"../../node_modules/encodeurl/index.js","original":{"line":57,"column":19}},{"generated":{"line":56,"column":20},"source":"../../node_modules/encodeurl/index.js","original":{"line":57,"column":20}},{"generated":{"line":56,"column":21},"source":"../../node_modules/encodeurl/index.js","original":{"line":58,"column":5},"name":"replace"},{"generated":{"line":56,"column":28},"source":"../../node_modules/encodeurl/index.js","original":{"line":58,"column":12}},{"generated":{"line":56,"column":29},"source":"../../node_modules/encodeurl/index.js","original":{"line":58,"column":13},"name":"UNMATCHED_SURROGATE_PAIR_REGEXP"},{"generated":{"line":56,"column":60},"source":"../../node_modules/encodeurl/index.js","original":{"line":58,"column":44}},{"generated":{"line":56,"column":62},"source":"../../node_modules/encodeurl/index.js","original":{"line":58,"column":46},"name":"UNMATCHED_SURROGATE_PAIR_REPLACE"},{"generated":{"line":56,"column":94},"source":"../../node_modules/encodeurl/index.js","original":{"line":58,"column":78}},{"generated":{"line":56,"column":95},"source":"../../node_modules/encodeurl/index.js","original":{"line":58,"column":79}},{"generated":{"line":56,"column":96},"source":"../../node_modules/encodeurl/index.js","original":{"line":59,"column":5},"name":"replace"},{"generated":{"line":56,"column":103},"source":"../../node_modules/encodeurl/index.js","original":{"line":59,"column":12}},{"generated":{"line":56,"column":104},"source":"../../node_modules/encodeurl/index.js","original":{"line":59,"column":13},"name":"ENCODE_CHARS_REGEXP"},{"generated":{"line":56,"column":123},"source":"../../node_modules/encodeurl/index.js","original":{"line":59,"column":32}},{"generated":{"line":56,"column":125},"source":"../../node_modules/encodeurl/index.js","original":{"line":59,"column":34},"name":"encodeURI"},{"generated":{"line":56,"column":134},"source":"../../node_modules/encodeurl/index.js","original":{"line":59,"column":43}},{"generated":{"line":56,"column":135},"source":"../../node_modules/encodeurl/index.js","original":{"line":59,"column":44}},{"generated":{"line":57,"column":0},"source":"../../node_modules/encodeurl/index.js","original":{"line":60,"column":0}}],"sources":{"../../node_modules/encodeurl/index.js":"/*!\r\n * encodeurl\r\n * Copyright(c) 2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = encodeUrl\r\n\r\n/**\r\n * RegExp to match non-URL code points, *after* encoding (i.e. not including \"%\")\r\n * and including invalid escape sequences.\r\n * @private\r\n */\r\n\r\nvar ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g\r\n\r\n/**\r\n * RegExp to match unmatched surrogate pair.\r\n * @private\r\n */\r\n\r\nvar UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g\r\n\r\n/**\r\n * String to replace unmatched surrogate pair with.\r\n * @private\r\n */\r\n\r\nvar UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2'\r\n\r\n/**\r\n * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\r\n *\r\n * This function will take an already-encoded URL and encode all the non-URL\r\n * code points. This function will not encode the \"%\" character unless it is\r\n * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\r\n * be encoded as `%25foo`).\r\n *\r\n * This encode is meant to be \"safe\" and does not throw errors. It will try as\r\n * hard as it can to properly encode the given URL, including replacing any raw,\r\n * unpaired surrogate pairs with the Unicode replacement character prior to\r\n * encoding.\r\n *\r\n * @param {string} url\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction encodeUrl (url) {\r\n  return String(url)\r\n    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)\r\n    .replace(ENCODE_CHARS_REGEXP, encodeURI)\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"ffa491004621b9c145f5c7e08e2ba7e2","cacheData":{"env":{}}}